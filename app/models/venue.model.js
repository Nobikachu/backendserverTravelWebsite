const db = require('../../config/db');const timeFormat = require('node-datetime');const dateFormat = require('dateformat');exports.venuePhotoUpload = function(id, photoFilename, description, is_primary, done) {    console.log(photoFilename);    let sqlQuery = "INSERT INTO VenuePhoto" +        " (venue_id, photo_filename, photo_description, is_primary)" +        " VALUES (?, ?, ?, ?);";    let value = [[id], [photoFilename], [description], [is_primary]];    db.getPool().query(sqlQuery, value, function(err, rows) {        if (err) {            console.log(err);            return done(400, {"ERROR": "Error selecting user"});        }        return done(201, {"SUCCESSFUL": "Image successfully uploaded"});    });};exports.updateVenue = function(venueId, venueName, categoryId, city, shortDescription, longDescription, address, latitude, longitude,  done) {    console.log("Updating.....");    let sqlQuery = "UPDATE Venue SET ";    let needAnd = false;    if (venueName !== '') {        sqlQuery = sqlQuery + "venue_name = '" + venueName + "'";        needAnd = true;    }    if (categoryId !== '') {        if (needAnd) {            sqlQuery = sqlQuery + " ,";        } else {            needAnd = true;        }        sqlQuery = sqlQuery + "category_id = " + categoryId;    }    if (city !== '') {        if (needAnd) {            sqlQuery = sqlQuery + " ,";        } else {            needAnd = true;        }        sqlQuery = sqlQuery + "city = '" + city + "'";    }    if (shortDescription !== '') {        if (needAnd) {            sqlQuery = sqlQuery + " ,";        } else {            needAnd = true;        }        sqlQuery = sqlQuery + "short_description = '" + shortDescription + "'";    }    if (longDescription !== '') {        if (needAnd) {            sqlQuery = sqlQuery + " ,";        } else {            needAnd = true;        }        sqlQuery = sqlQuery + "long_description = '" + longDescription + "'";    }    if (address !== '') {        if (needAnd) {            sqlQuery = sqlQuery + " ,";        } else {            needAnd = true;        }        sqlQuery = sqlQuery + "address = '" + address + "'";    }    if (latitude !== '') {        if (needAnd) {            sqlQuery = sqlQuery + " ,";        } else {            needAnd = true;        }        sqlQuery = sqlQuery + "latitude = " + latitude;    }    if (longitude !== '') {        if (needAnd) {            sqlQuery = sqlQuery + " ,";        } else {            needAnd = true;        }        sqlQuery = sqlQuery + "category_id = " + longitude;    }    sqlQuery = sqlQuery + " WHERE Venue.venue_id = " + venueId + ";";    console.log(sqlQuery);    db.getPool().query(sqlQuery, function(err, rows) {        return done(200, {"Successful": "The following venue has been edited now"});    });};exports.newVenue = function (adminId, categoryId, venueName, city, shortDescription, longDescription, address, latitude, longitude, done) {    let timeNow = timeFormat.create().format('Y-m-d H:M:S');    let sqlQuery = "INSERT INTO Venue" +        " (admin_id, category_id, venue_name, city, short_description, long_description, date_added, address, latitude, longitude)" +        " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);";        let value = [[adminId], [categoryId], [venueName], [city], [shortDescription], [longDescription], [timeNow], [address], [latitude], [longitude]];        // " (" + adminId + ", " + categoryId + ", '" + venueName + "', '" + city + "', '" + shortDescription  + "', '" + longDescription + "', '" + timeNow + "', '" + address  + "', " + latitude + ", " + longitude  + ");";    console.log(sqlQuery);    db.getPool().query(sqlQuery, value, function(err, rows) {        // let sqlQuery2 = "SELECT venue_id AS venueId FROM Venue WHERE Venue.admin_id = " + adminId + " AND Venue.category_id = "        //     + categoryId + " AND Venue.venue_name = '" + venueName + "' AND Venue.city = '" + city        //     + "' AND Venue.short_description = '" + shortDescription + "' AND Venue.long_description = '" + longDescription        //     + "' AND Venue.date_added = " + timeNow + " AND Venue.address = '" + address + "' AND Venue.latitude = " + latitude + " AND Venue.longitude = " + longitude +";";        let sqlQuery2 = "SELECT venue_id AS venueId FROM Venue ORDER BY venue_id DESC LIMIT 1;"        console.log(sqlQuery2);        db.getPool().query(sqlQuery2, function(err2, venueId) {            console.log('======================================');            console.log(venueId);            console.log('======================================');            return done(201, venueId[0]);        });    });};exports.checkVenueExist = function(venueId, done) {    let sqlQuery =        "SELECT * FROM Venue WHERE Venue.venue_id = " + venueId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        if (rows.length === 0) {            return done(404, {"ERROR": "The following venue does not exist"});        } else {            return done(0, '');        }    });};exports.checkVenueAuth = function(venueId, userId,  done) {    let sqlQuery =        "SELECT * FROM Venue WHERE Venue.venue_id = " + venueId + " AND Venue.admin_id = " + userId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        if (rows.length === 0) {            return done(403, {"ERROR": "You do not have permission to edit this!!!"});        } else {            return done(0, '');        }    });};exports.getAdmin = function(userId, done) {    let sqlQuery =        "SELECT user_id AS userId, username FROM User WHERE User.user_id = " + userId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        return done(200, rows);    });};exports.getCategoryDetails = function(categoryId, done) {    let sqlQuery =        "SELECT category_id AS categoryId, category_name AS categoryName, category_description AS categoryDescription FROM VenueCategory WHERE VenueCategory.category_id = " + categoryId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        return done(200, rows);    });};exports.getVenueDetails = function(venueId, done) {    let sqlQuery =        "SELECT admin_id, category_id, venue_name, city, short_description, long_description, date_added, address, latitude, longitude FROM Venue WHERE Venue.venue_id = " + venueId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        return done(200, rows);    });};exports.getPhotoDetails = function(venueId, done) {    let sqlQuery =        "SELECT photo_filename AS photoFilename, photo_description AS photoDescription, is_primary AS isPrimary FROM VenuePhoto WHERE VenuePhoto.venue_id = " + venueId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        return done(200, rows);    });};exports.checkToken = function (token, done) {    let sqlQuery =        "SELECT user_id FROM User WHERE User.auth_token = '" + token + "';";    db.getPool().query(sqlQuery, function(err, rows) {        // if (err) return done(400, {        //     "ERROR": "Error selecting venue"        // });        if (rows.length === 0) {            console.log(3);            return done(401, false);        } else {            return done(0, rows[0].user_id);        }    });};exports.checkPrevReview = function (userId, venueId,  done) {    let sqlQuery =        "SELECT * FROM Review WHERE Review.review_author_id = " + userId + " AND Review.reviewed_venue_id = " + venueId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        if (err) return done({"ERROR": "Error selecting venue"});        if (rows.length === 0) {            return done(200, false);        } else {            return done(403, true);        }    });};exports.checkVenueOwner = function (userId, venueId, done) {    let sqlQuery =        "SELECT * FROM Venue WHERE Venue.admin_id = " + userId + " AND Venue.venue_id = " + venueId + ";";    db.getPool().query(sqlQuery, function(err, rows) {        if (rows.length === 0) {            return done(200, false);        } else {            return done(403, true);        }    });}exports.postReview = function (venueId, authorId, reviewBody, starRating, costRating, done) {    let timeNow = timeFormat.create().format('Y-m-d H:M:S');    let sqlQuery = "INSERT INTO Review" +    " (reviewed_venue_id, review_author_id, review_body, star_rating, cost_rating, time_posted)" +    " VALUES" +    " ('" + venueId + "', '" + authorId + "', '" + reviewBody + "', '" + starRating + "', '" + costRating  + "', '" + timeNow + " ');";    db.getPool().query(sqlQuery, function(err, rows) {        if (err) {            console.log(err);            return done(400, {"ERROR": "Error selecting venue"});        } else {            return done(201, {"SUCCESSFUL": "Review has been posted!"});        }        // console.log(rows.length);        // if (rows.length === 0) {        //     return done(401, {"ERROR": "Token does not match with any of the current user online"});        // }    });};exports.getVenue = function(searchParams, done) {    let sqlQuery =        'SELECT Venue.venue_id AS venueId, Venue.venue_name AS venueName, Venue.category_id AS categoryId, ' +        'Venue.city, Venue.short_description AS shortDescription, Venue.latitude, Venue.longitude, ' +        'AVG(COALESCE(star_rating,0)) AS meanStarRating, COALESCE(cost_rating, 0) AS modeCostRating, VenuePhoto.photo_filename AS primaryPhoto ' +        'FROM Venue LEFT JOIN Review ON Venue.venue_id = Review.reviewed_venue_id LEFT JOIN VenuePhoto ON Venue.venue_id = VenuePhoto.venue_id';    var needWhere = 1;    if (searchParams['q']) {        sqlQuery = sqlQuery + " WHERE venue_name LIKE '%" + searchParams['q'] + "%'";        needWhere = 0;    }    if (searchParams['city']) {        if (needWhere) {            sqlQuery = sqlQuery + ' WHERE ';            needWhere = 0;        } else {            sqlQuery = sqlQuery + ' AND ';        }        sqlQuery = sqlQuery + "Venue.city = '" + searchParams['city'] + "'";    }    if (searchParams['categoryId']) {        if (needWhere) {            sqlQuery = sqlQuery + ' WHERE ';            needWhere = 0;        } else {            sqlQuery = sqlQuery + ' AND ';        }        sqlQuery = sqlQuery + "Venue.category_id = " + searchParams['categoryId'];    }    if (searchParams['adminId']) {        if (needWhere) {            sqlQuery = sqlQuery + ' WHERE ';            needWhere = 0;        } else {            sqlQuery = sqlQuery + ' AND ';        }        sqlQuery = sqlQuery + "Venue.admin_id = " + searchParams['adminId'];    }    if (searchParams['maxCostRating']) {        if (needWhere) {            sqlQuery = sqlQuery + ' WHERE ';            needWhere = 0;        } else {            sqlQuery = sqlQuery + ' AND ';        }        sqlQuery = sqlQuery + searchParams['maxCostRating'] + " >= cost_rating";    }    sqlQuery = sqlQuery + ' GROUP BY Venue.venue_id';    if (searchParams['minStarRating']) {        sqlQuery = sqlQuery + " HAVING AVG(star_rating) >= " + searchParams['minStarRating'];    }    // if (searchParams['maxCostRating']) {    //     sqlQuery = sqlQuery + " HAVING " + searchParams['maxCostRating'] + ">= COALESCE(cost_rating, 0)";    // }    sqlQuery = sqlQuery + ' ORDER BY star_rating DESC';    if (searchParams['count']) {        if (searchParams['startIndex']) {            sqlQuery = sqlQuery + ' LIMIT ' + searchParams['count'] + ' OFFSET ' + searchParams['startIndex'];        } else {            sqlQuery = sqlQuery + ' LIMIT ' + searchParams['count'];        }    } else if (searchParams['startIndex']) {        sqlQuery = sqlQuery + ' LIMIT 1844674407 OFFSET ' + searchParams['startIndex'];    }    db.getPool().query(sqlQuery, function(err, rows) {        if (err) {            console.log(err);            return done(400, {"ERROR": "Error selecting venue"});        }        if (searchParams['minStarRating']) {            if (searchParams['minStarRating'] > 5) {                return done(400, {"ERROR": "Minimum star rating cannot exceed 5"});            }        }        return done(200, rows);    });};exports.getCategory = function(done) {    let sqlQuery = 'SELECT category_id AS categoryId, category_name AS categoryName, category_description AS categoryDescription FROM VenueCategory';    db.getPool().query(sqlQuery, function(err, rows) {        if (err) return done({"ERROR": "Error selecting venue"});        return done(rows);    });};